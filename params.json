{"name":"Subcmd","tagline":"A Python module that implements subcommands CLI pattern.","body":"subcmd\r\n======\r\n\r\n**subcmd** a python module for easily bulding multi-command scripts. Provides automatic usage help generation based on classes and methods python documentation, grouped arguments helpers and a rich API (Application Programming Interface) to build rock solid CLI (Command line interface) tools and utilities.\r\n\r\nIt is licensed with the [BSD three-clause] license.\r\n\r\nA common CLI (Command line interface) tool built with **subcmd** follows a pattern like:\r\n\r\n    [command] [subcommand] [options] [arguments]\r\n\r\nMore information\r\n----------------\r\n\r\n**subcmd** is written by Raül Pérez. For questions and suggestions concerning this project please go to its [Github repository site] and file a bug or write him a message.\r\n\r\n<iframe frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\" src=\"http://platform.twitter.com/widgets/follow_button.1334389481.html#_=1335048597247&amp;id=twit-repejota&amp;lang=en&amp;screen_name=repejota&amp;show_count=true&amp;show_screen_name=true&amp;size=m\" class=\"twitter-follow-button\" style=\"width: 218px; height: 20px;\" title=\"Twitter Follow Button\"></iframe>\r\n</div>\r\n\r\nInstall\r\n=======\r\n\r\nThe common way to install **subcmd** is using pip:\r\n\r\n    $ pip install subcmd\r\n\r\nUpgrade is also trivial:\r\n\r\n    $ pip install --upgrade subcmd\r\n\r\nTo upgrade just download another version and proceed like a normal installation.\r\n\r\nFor old versions and active development branches please, refer to the project Github [pages].\r\n\r\nOnce you have installed proceed to read the quick tutorial &lt;tutorial&gt; or the in depth manual &lt;manual&gt; and start to work with **subcmd**.\r\n\r\nTutorial\r\n========\r\n\r\nThe most simple example use of **subcmd** is a class that inherits from subcmd.app.App base object. Then ( and by default ), all methods of this created class which starts with prefix “*do\\_*” will be available as subcommands.\r\n\r\nWith subcmd.decorators.option and subcmd.decorators.arg decorators you can add positional arguments and valued options to each command.\r\n\r\nFor example:\r\n\r\n    from subcmd.app import App\r\n    from subcmd.decorators import option\r\n    from subcmd.decorators import arg\r\n\r\n    class Application(App):\r\n        \"\"\"a description of the example app\"\"\"\r\n        name = 'example'\r\n        version = '0.1'\r\n        default_args = ['--help']\r\n\r\n        @option('--log', '-l', action='store_true', help='log foo is on')\r\n        def do_foo(self, options):\r\n            \"\"\"help text for foo subcommand\"\"\"\r\n            print options\r\n\r\n        @option('-f', '--force', action='store_true', help='force bar execution')\r\n        def do_bar(self, options):\r\n            \"\"\"help text for bar subcommand\"\"\"\r\n            print options\r\n\r\n    if __name__ == \"__main__\":\r\n        app = Application()\r\n        app.cmdline()\r\n\r\nExecuting this script with no command line arguments will output:\r\n\r\n    $ python example.py\r\n\r\n    usage: example.py [-h] [-v] {foo,bar} ...\r\n\r\n    a description\r\n\r\n    optional arguments:\r\n      -h, --help     show this help message and exit\r\n      -v, --version\r\n\r\n    subcommands:\r\n      valid subcommands\r\n\r\n      {foo,bar}      additional help\r\n        bar          help text for bar subcommand\r\n        foo          help text for foo subcommand\r\n\r\n    an epilog\r\n\r\nYou can see how if no argument is specified an automatic usage help message is shown.\r\n\r\nAlso all docstrings definint both class object and every method starting with “do\\_” are converted to help descriptions for each command.\r\n\r\nFinally **subcmd** ads by default some arguments that are common on all CLI based tools like `--version` ( wich shows the version string of your tool ) and `--help` ( wich generates the same usage message you see if no command line arguments are specified ).\r\n\r\n**subcmd** provides a lot of more features and customization options, refer to the detailed manual &lt;manual&gt; for more information.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}